@page "/(dev)"
@page "/(dev2)"
@page "/(dev3)"
@page "/(dev4)"
@using System.Collections.ObjectModel;

@*<div class="w3-animate-opacity" style="color:red;">
    <h1>Внимание!</h1>
    <h2>Раздел находится в разработке!</h2>
</div>*@


<Row Class="table-general">
    <Column Class="table-general-column">
        <Card Class="table-general-card">
            <CardHeader Class="table-header">
                <CardTitle Class="table-header-head w3-animate-opacity container"><h2>Узлы</h2></CardTitle>
            </CardHeader>
            <CardBody Class="container-fluid table-header-body">
                <Fields>
                    <Field Class="table-header-body-item">
                        <FieldLabel>
                            Редактирование
                        </FieldLabel>
                        <FieldBody>
                            <SelectEdit @bind-SelectedValue="@editMode">
                                <SelectItem Value="DataGridEditMode.Form">Форма</SelectItem>
                                <SelectItem Value="DataGridEditMode.Inline">Строка</SelectItem>
                                @*<SelectItem Value="DataGridEditMode.Popup">Popup</SelectItem>*@
                            </SelectEdit>
                        </FieldBody>
                    </Field>
                    @*<Field Class="table-header-body-item">
                        <FieldLabel>
                            4
                        </FieldLabel>
                        <FieldBody>
                            <CheckEdit IsInline="true" @bind-Checked="@showPager">Show Pager</CheckEdit>
                        </FieldBody>
                    </Field>
                    <Field Class="table-header-body-item">
                        <FieldLabel>
                            4
                        </FieldLabel>
                        <FieldBody>
                            <CheckEdit IsInline="true" @bind-Checked="@showPager">Show Pager</CheckEdit>
                        </FieldBody>
                    </Field>*@
                </Fields>
            </CardBody>
            <CardBody Class="table-body overflow-auto">
                <DataGrid TItem="Employee"
                          Data="@dataModels"
                          EditMode="@editMode"
                          Editable="@editable"
                          Sortable="@sortable"
                          Filterable="@filterable"
                          ShowPager="@showPager"
                          PageSize ="5"
                          RowInserted="@OnRowInserted"
                          RowUpdated="@OnRowUpdated"
                          RowRemoved="@OnRowRemoved"
                          UseInternalEditing="true"
                          @bind-SelectedRow="@selectedEmployee"
                          DetailRowTrigger="@((item)=>item.Salaries?.Count > 0 && item.Id == selectedEmployee?.Id)"
                          IsStriped="true"
                          IsBordered="true"
                          IsHoverable="true">
                    <ChildContent>
                        <DataGridCommandColumn TItem="Employee" Width="110px">
                            <NewCommandTemplate>
                                <Button Color="Color.Success" Clicked="@context.Clicked">
                                    <img class="img-table-new" src="img/new.png"/>
                                </Button>
                            </NewCommandTemplate>
                            <EditCommandTemplate>
                                <Button Class="outlined-edit" Color="Color.None" Clicked="@context.Clicked">
                                    <img class="img-table-edit" src="img/edit.png"/>
                                </Button>
                            </EditCommandTemplate>
                            <SaveCommandTemplate>
                                <Button Color="Color.Primary" Clicked="@context.Clicked">
                                    <img class="img-table-save" src="img/save.png"/>
                                </Button>
                            </SaveCommandTemplate>
                            <DeleteCommandTemplate>
                                <Button Class="outlined-delete" Color="Color.None" Clicked="@context.Clicked">
                                    <img class="img-table-delete" src="img/jesus2.png"/>
                                </Button>
                            </DeleteCommandTemplate>
                            <CancelCommandTemplate>
                                <Button Color="Color.Secondary" Clicked="@context.Clicked">
                                    <img class="img-table-cancel" src="img/jesus2.png"/>
                                </Button>
                            </CancelCommandTemplate>
                            <ClearFilterCommandTemplate>
                                <Button Color="Color.Warning" Clicked="@context.Clicked">
                                    <img class="img-table-filter" src="img/filter.png"/>
                                </Button>
                            </ClearFilterCommandTemplate>
                        </DataGridCommandColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Id )" Caption="#" Sortable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.FirstName )" Caption="First Name" Editable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.LastName )" Caption="Last Name" Editable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.EMail )" Caption="EMail" Editable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.City )" Caption="City" Editable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Zip )" Caption="Zip" Editable="true" />
                        <DataGridNumericColumn TItem="Employee" Field="@nameof( Employee.DateOfBirth )" Caption="Date Of Birth" Editable="true">
                            <DisplayTemplate>
                                @{
                                    var date = (context as Employee)?.DateOfBirth;

                                    if (date != null)
                                    {
                                        @($"{date.Value.ToShortDateString()}, age: {( DateTime.Now.Year - date.Value.Year )}")
                                    }
                                }
                            </DisplayTemplate>
                        </DataGridNumericColumn>
                        <DataGridNumericColumn TItem="Employee" Field="@nameof( Employee.Childrens )" Caption="Childrens" Editable="true" />
                        <DataGridSelectColumn TItem="Employee" Field="@nameof( Employee.Gender )" Caption="Gender" Editable="true">
                            <DisplayTemplate>
                                @{
                                    var gender = (context as Employee)?.Gender;

                                    @if (gender == "M")
                                    {
                                        @("Male")
                                    }
                                    else if (gender == "F")
                                    {
                                        @("Female")
                                    }
                                }
                            </DisplayTemplate>
                            <EditTemplate>
                                <SelectEdit TValue="string" SelectedValue="@((string)( ( (CellEditContext)context ).CellValue ))" SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)">
                                    <SelectItem TValue="string" Value="null"></SelectItem>
                                    <SelectItem TValue="string" Value="@("M")">Male</SelectItem>
                                    <SelectItem TValue="string" Value="@("F")">Female</SelectItem>
                                </SelectEdit>
                            </EditTemplate>
                        </DataGridSelectColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Salary )" Caption="Salary" Editable="true">
                            <DisplayTemplate>
                                @($"{( context as Employee )?.Salary} €")
                            </DisplayTemplate>
                            <EditTemplate>
                                <NumericEdit TValue="decimal" Value="@((decimal)( ( (CellEditContext)context ).CellValue ))" ValueChanged="@(v => ( (CellEditContext)context ).CellValue = v)" />
                            </EditTemplate>
                        </DataGridColumn>
                        @*<DataGridCheckColumn TItem="Employee" Field="@nameof(Employee.IsActive)" Caption="Active" Editable="true" Filterable="false">
                            <DisplayTemplate>
                                @(( context as Employee )?.IsActive == true ? "active" : "not active")
                            </DisplayTemplate>
                        </DataGridCheckColumn>*@
                    </ChildContent>
                    <DetailRowTemplate>
                        @{
                            var salaries = (context as Employee).Salaries;

                            <DataGrid TItem="Salary"
                                      Data="salaries"
                                      Sortable="false"
                                      ShowCaptions="false">
                                <DataGridCommandColumn TItem="Salary" />
                                <DataGridDateColumn TItem="Salary" Field="@nameof(Salary.Date)" Caption="Date" />
                                <DataGridNumericColumn TItem="Salary" Field="@nameof(Salary.Total)" Caption="Total" />
                            </DataGrid>
                        }
                    </DetailRowTemplate>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>
@*<Row>
    <Column>
        <Card>
            <CardHeader>
                <CardTitle>Selected Employee</CardTitle>
                <CardSubtitle></CardSubtitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    <Field>
                        <FieldLabel>First Name</FieldLabel>
                        <FieldBody>
                            <TextEdit IsReadonly="true" Text="@selectedEmployee?.FirstName"></TextEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Last Name</FieldLabel>
                        <TextEdit IsReadonly="true" Text="@selectedEmployee?.LastName"></TextEdit>
                    </Field>
                </Fields>
                <Fields>
                    <Field>
                        <FieldLabel>Email</FieldLabel>
                        <FieldBody>
                            <TextEdit IsReadonly="true" Text="@selectedEmployee?.EMail"></TextEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>City</FieldLabel>
                        <TextEdit IsReadonly="true" Text="@selectedEmployee?.City"></TextEdit>
                    </Field>
                </Fields>
            </CardBody>
        </Card>
    </Column>
</Row>*@

@code{
    DataGridEditMode editMode { get; set; } = DataGridEditMode.Form;
    bool editable { get; set; } = true;
    bool sortable { get; set; } = true;
    bool filterable { get; set; } = true;
    bool showPager { get; set; } = true;

    // TODO: add options to control the commands
    bool newCommandAllowed = true;
    bool editCommandAllowed = true;
    bool saveCommandAllowed = true;
    bool cancelCommandAllowed = true;
    bool deleteCommandAllowed = true;
    bool clearFilterCommandAllowed = true;

    Employee selectedEmployee;

    public class Employee
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EMail { get; set; }
        public string City { get; set; }
        public string Zip { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public int? Childrens { get; set; }
        public string Gender { get; set; }
        public decimal Salary { get; set; }
        public bool IsActive { get; set; }

        public List<Salary> Salaries { get; set; } = new List<Salary>();
    }

    public class Salary
    {
        public DateTime Date { get; set; }
        public decimal Total { get; set; }
    }

    ObservableCollection<Employee> dataModels { get; set; } = new ObservableCollection<Employee> {
        new Employee {Id = 1,FirstName = "Caro",LastName = "Nizard",EMail = "cnizard0@hc360.com",City = "Faīẕābād",Zip = null,Salary = 51724.19m,
            Salaries = new List<Salary> {
                new Salary { Date = new DateTime(2019,1,6), Total = 6000 },
                new Salary { Date = new DateTime(2019,2,7), Total = 5005 },
                new Salary { Date = new DateTime(2019,3,5), Total = 3000 }
            }},
        new Employee {Id = 2,FirstName = "Matthew",LastName = "Labb",EMail = "mlabb1@ca.gov",City = "Xinxi",Zip = null,Salary = 65176.6m, Childrens=2},
        new Employee {Id = 3,FirstName = "Enos",LastName = "Clendennen",EMail = "eclendennen2@shareasale.com",City = "Listvyanskiy",Zip = "633224",Salary = 75602.48m, Childrens=1,
            Salaries = new List<Salary> {
                new Salary { Date = new DateTime(2019,2,7), Total = 4005 },
                new Salary { Date = new DateTime(2019,3,5), Total = 8000 }
            }},
        new Employee {Id = 4,FirstName = "Cirilo",LastName = "Douch",EMail = "cdouch3@thetimes.co.uk",City = "Wiset Chaichan",Zip = "84280",Salary = 88511.38m },
        new Employee {Id = 5,FirstName = "Bibbie",LastName = "Prahm",EMail = "bprahm4@dropbox.com",City = "Nkandla",Zip = "3859",Salary = 41665.0m },
        new Employee {Id = 6,FirstName = "Ferd",LastName = "Bizzey",EMail = "fbizzey5@vimeo.com",City = "Arroyo Seco",Zip = "5196",Salary = 58632.74m },
        new Employee {Id = 7,FirstName = "Annalee",LastName = "Mathie",EMail = "amathie6@qq.com",City = "Qi’an",Zip = null,Salary = 38622.71m }
    };

    void OnRowInserted(SavedRowItem<Employee, Dictionary<string, object>> e)
    {
        //var employee = e.Item;

        //employee.Id = dataModels?.Max(x => x.Id) + 1 ?? 1;

        //dataModels.Add(employee);
    }

    void OnRowUpdated(SavedRowItem<Employee, Dictionary<string, object>> e)
    {
        var employee = e.Item;

        employee.FirstName = (string)e.Values["FirstName"];
        employee.LastName = (string)e.Values["LastName"];
        employee.EMail = (string)e.Values["EMail"];
        employee.City = (string)e.Values["City"];
        employee.Zip = (string)e.Values["Zip"];
        employee.DateOfBirth = (DateTime?)e.Values["DateOfBirth"];
        employee.Childrens = (int?)e.Values["Childrens"];
        employee.Gender = (string)e.Values["Gender"];
        employee.Salary = (decimal)e.Values["Salary"];
    }

    void OnRowRemoved(Employee model)
    {
        if (dataModels.Contains(model))
        {
            dataModels.Remove(model);
        }
    }
}
