@page "/contacts"
@layout MainLayout
@using TKZ.Shared
@using System.ComponentModel.DataAnnotations
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject HttpClient Http

<div class="contact">
    <h1>@Localizer.ContactHeader</h1>
    <EditForm Model="@contact" OnValidSubmit="SendFeedback">
        <DataAnnotationsValidator />
        <div class="text-danger">
            <ValidationSummary />
            <text class="text-success">@notification</text>
        </div>
        <div>
            <p><label for="CustomerName">@contact.Localizer.Name:</label></p>
            <InputText class="form-control"
                       id="CustomerName"
                       @bind-placeholder="@contact.Localizer.Name"
                       @bind-Value="contact.Name" />
        </div>
        <div>
            <p><label for="CustomerEmail">@contact.Localizer.Email:</label></p>
            <InputText class="form-control"
                       type="text"
                       id="CustomerEmail"
                       @bind-placeholder="@contact.Localizer.Email"
                       @bind-Value="contact.Email" />
        </div>
        <div>
            <p><label for="CustomerMessage">@contact.Localizer.Message:</label></p>
            <InputTextArea class="form-control big"
                           type="text"
                           id="CustomerMessage"
                           @bind-placeholder="@contact.Localizer.Message"
                           @bind-Value="contact.Message" />
        </div>
        <button type="submit" value="Submit" class="my_button long" style="float: right;">@contact.Localizer.Send</button>
    </EditForm>
</div>

@code {
    Contact contact = new Contact();

    string notification { get; set; }

    class Contact
    {
        public I18nText.Pages.Contact.Contact Localizer { get; set; } = new I18nText.Pages.Contact.Contact();

        public DateTime datetime { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Введите имя")]
        public string Name { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Введите адрес e-mail")]
        [EmailAddress(ErrorMessage = "Некорректный адрес e-mail")]
        public string Email { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Оставьте сообщение")]
        public string Message { get; set; }
    }

    private async Task SendFeedback()
    {
        this.contact.datetime = DateTime.Now;
        await Http.PostJsonAsync("Feedback", this.contact);
        notification = Localizer.Success;
        this.contact = new Contact();
        this.contact.Localizer = await I18nText.GetTextTableAsync<I18nText.Pages.Contact.Contact>(this);
    }


    //Localizator
    I18nText.Pages.Contact.Contact Localizer = new I18nText.Pages.Contact.Contact();

    protected override async Task OnInitializedAsync()
    {
        this.contact.Localizer = await I18nText.GetTextTableAsync<I18nText.Pages.Contact.Contact>(this);
        Localizer = await I18nText.GetTextTableAsync<I18nText.Pages.Contact.Contact>(this);
    }
}