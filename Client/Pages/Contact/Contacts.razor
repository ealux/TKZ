@page "/Contacts"
@layout SecondaryLayout
@using TKZ.Shared
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<div class="contact">
    <h1>Связаться с нами</h1>
    <EditForm Model="@contact" OnValidSubmit="SendFeedback">
        <DataAnnotationsValidator />
        <div class="text-danger">
            <ValidationSummary />
            <text class="text-success">@notification</text>
        </div>
        <div>
            <p><label for="CustomerName">Ваше имя:</label></p>
            <InputText class="form-control"
                       id="CustomerName"
                       placeholder="Ваше имя"
                       @bind-Value="contact.Name" />
        </div>
        <div>
            <p><label for="CustomerEmail">Ваш E-mail:</label></p>
            <InputText class="form-control"
                       type="text"
                       id="CustomerEmail"
                       placeholder="E-mail"
                       @bind-Value="contact.Email" />
        </div>
        <div>
            <p><label for="CustomerMessage">Сообщение:</label></p>
            <InputTextArea class="form-control big"
                           type="text"
                           id="CustomerMessage"
                           placeholder="Сообщение"
                           @bind-Value="contact.Message" />
        </div>
        <button type="submit" value="Submit" class="my_button long" style="float: right;">Отправить</button>
    </EditForm>
</div>

@code {
    Contact contact = new Contact();

    string notification { get; set; }

    class Contact
    {
        public DateTime datetime { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Введите имя")]
        public string Name { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Введите адрес e-mail")]
        [EmailAddress(ErrorMessage = "Некорректный адрес e-mail")]
        public string Email { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Оставьте сообщение")]
        public string Message { get; set; }
    }

    private async Task SendFeedback()
    {
        this.contact.datetime = DateTime.Now;
        await Http.PostJsonAsync("Feedback", this.contact);
        notification = "Отзыв успешно отправлен! Спасибо!";
        this.contact = new Contact();
    }
}