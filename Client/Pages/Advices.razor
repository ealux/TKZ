@page "/advices"
@inject HttpClient Http
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

@if (String.IsNullOrEmpty(docs))
{
    <LoadingElement />
}
else
{
    <div class="container-fluid align-content-center">
        @((MarkupString)docs)
        @((MarkupString)about)
        @((MarkupString)model)
        @((MarkupString)elements)
        @((MarkupString)input)
        @((MarkupString)calc)
        @((MarkupString)glossary)
        @((MarkupString)source)
    </div>
}

@code {

    string _draft = "";
    string about = "";
    string calc = "";
    string docs = "";
    string elements = "";
    string glossary = "";
    string input = "";
    string model = "";
    string source = "";

    I18nText.Pages.Advices.Advices Localizer = new I18nText.Pages.Advices.Advices();

    protected override async Task OnInitializedAsync()
    {
        var pre = await Http.GetStringAsync("Advice/docs");
        docs = pre;

        Localizer = await I18nText.GetTextTableAsync<I18nText.Pages.Advices.Advices>(this);

        _draft = await Http.GetStringAsync("Advice/_draft");
        about = await Http.GetStringAsync("Advice/about");
        calc = await Http.GetStringAsync("Advice/calc");
        elements = await Http.GetStringAsync("Advice/elements");
        glossary = await Http.GetStringAsync("Advice/glossary");
        input = await Http.GetStringAsync("Advice/input");
        model = await Http.GetStringAsync("Advice/model");
        source = await Http.GetStringAsync("Advice/source");
    }
}