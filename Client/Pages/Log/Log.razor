@namespace TKZ.Client.Pages.Log
@inject LogBase LB
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@implements IDisposable
@*<div class="pre_log d-inline-block flex-column">
        R
    </div>*@
<div class="log frame w3-animate-right w3-animate-fading flex-fill  @(LB.Collapse ? "collapse":"")" @onchange="LogChangeEvent">
    <div class="d-flex flex-row flex-nowrap align-items-center" style="border-bottom: 1px solid var(--P-dark)">
        <div class="font-weight-bold flex-fill">Журнал событий</div>
        <Button Class="transparent">
            <svg class="edit-icon" @onclick="@(() => {})">
                <use href="/img/Icon.svg#Delete"></use>
            </svg>
        </Button>
    </div>
    <div class="log-content flex-fill" @onchange="LogChangeEvent">

        @foreach (var mes in LB.Messages)
        {
            <TKZ.Client.Pages.Log.Message Class="@mes.Class"
                                          Type="@mes.Type"
                                          Header="@mes.Header"
                                          Text="@mes.Text"
                                          Link="@mes.Link" />
        }

    </div>
    <button class="my_button primary"
            @onclick="RemoveMessageQueue">
        <b>@Localizer.Clear</b>
    </button>
</div>

@code {
    [Parameter]
    public EventCallback LogChangeEvent { get; set; }

    private async Task RemoveMessageQueue()
    {
        await LB.RemoveMessage();
        LB.Collapse = !LB.Collapse;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        LB.OnChange += StateHasChanged;
    }

    //Localizator
    I18nText.Pages.Log.Log Localizer = new I18nText.Pages.Log.Log();

    protected override async Task OnInitializedAsync()
    {
        Localizer = await I18nText.GetTextTableAsync<I18nText.Pages.Log.Log>(this);
    }

    public void Dispose()
    {
        LB.OnChange -= StateHasChanged;
    }
}