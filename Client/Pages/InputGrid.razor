@using BlazorInputFile
@using System.IO
@using TKZ.Shared
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject NavigationManager navmanager
@inject GridService service
@inject LogBase Log
@page "/gridinput"

<div style="display:block;" class="frame m-auto">
    <h1>@Localizer.Choose</h1>

    <p>@Localizer.Info</p>

    <div class="drag-drop-zone m-auto">
        <BlazorInputFile.InputFile multiple OnChange="ViewFile" />
    </div>

    @if (selectedFiles != null)
    {
        foreach (var item in selectedFiles)
        {
            <h3>@item.Name</h3>
            Console.WriteLine(item.Data);
        }

        <button class="my_button" @onclick="Upload">@Localizer.Upload</button>
        <button class="my_button" @onclick="Clear">@Localizer.Clear</button>
    }
</div>

@code {
    List<IFileListEntry> selectedFiles;

    void ViewFile(IFileListEntry[] files)
    {
        selectedFiles = files.Where(f => f.Name.Contains(".json")).ToList();
    }

    async Task Upload()
    {
        if (selectedFiles == null || selectedFiles.Count == 0) return;

        //Отчистка лога
        if (Log.Messages.Any((m) => m.Class == MessageClass.Deserialization)) await Log.RemoveMessage(byClass: MessageClass.Deserialization);

        List<Grid> grids = new List<Grid>();

        foreach (var item in selectedFiles)
        {
            try
            {
                grids.Add(await Grid.Deserialize(item.Data));
            }
            catch (Exception)
            {
                Log.AddMessage(MessageCollection.Deserialize_Error(item.Name));
                Log.Collapse = false;
            }
        }

        if (grids.Count > 0)
        {
            Console.WriteLine(grids.Count);

            foreach (var newGrid in grids)
            {
                Grid.Networks.Add(newGrid);
                Log.AddMessage(MessageCollection.NewGrid_Added(newGrid.Name));
            }

            service.CurrentGridName = Grid.Networks[Grid.Networks.Count - 1].Name;
            Grid.SetInstance(Grid.Networks[Grid.Networks.Count - 1]);
            Log.Collapse = false;
            navmanager.NavigateTo("/nodes");
        }

        StateHasChanged();
    }

    void Clear()
    {
        selectedFiles = null;
        StateHasChanged();
    }

    //Localizator
    I18nText.Pages.InputGrid Localizer = new I18nText.Pages.InputGrid();

    protected override async Task OnInitializedAsync() //Initial
    {
        Localizer = await I18nText.GetTextTableAsync<I18nText.Pages.InputGrid>(this);
    }
}