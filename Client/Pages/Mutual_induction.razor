@page "/mutual_induction"
@using Blazorise.DataGrid
@using TKZ.Shared.Model
@inject HttpClient Http
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject LogBase Log
@using TKZ.Client.Pages.Components

@if (mutuals == null)
{
    <LoadingElement />
}
else
{
    <div class="frame table-container overflow-auto">
        <DataGrid TItem="Mutual"
                  Data="@mutuals"
                  PageSize="@mutuals.Count"
                  EditMode="@DataGridEditMode.Inline"
                  Editable="true"
                  Sortable="true"
                  Filterable="true"
                  RowInserted="@OnRowInserted"
                  RowUpdated="@OnRowUpdated"
                  RowRemoved="@OnRowRemoved"
                  Narrow="true"
                  Class="my_table text-center">

            @*IsActive*@
            <DataGridColumn TItem="Mutual"
                            Field="@nameof(Mutual.IsActive)"
                            Caption="@(@Localizer.IsActive)"
                            Editable="true"
                            Sortable="true"
                            CellClass="@((item)=>"check-column")">
                <DisplayTemplate>
                    <Check TValue="bool" Checked="context.IsActive" CheckedChanged="@((v)=>context.IsActive = v)" />
                </DisplayTemplate>
                <EditTemplate>
                    <Check TValue="bool" Checked="@((bool)( ( (CellEditContext)context ).CellValue ))" CheckedChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)" />
                </EditTemplate>
                <FilterTemplate>
                    <Select Class="black check-column" TValue="string" SelectedValueChanged="@(e => context.TriggerFilterChange(e == "*" ? "" : e.ToString()))">
                        <SelectItem Value="@("*")"></SelectItem>
                        <SelectItem Value="@(true.ToString())">@Localizer.ActiveFilter</SelectItem>
                        <SelectItem Value="@(false.ToString())">@Localizer.NotActiveFilter</SelectItem>
                    </Select>
                </FilterTemplate>
            </DataGridColumn>
            @*IdFirstBranch*@
            <DataGridNumericColumn TItem="Mutual"
                                   Field="@nameof(Mutual.IdFirstBranch)"
                                   Caption="@Localizer.firstBranch"
                                   Editable="true"
                                   Sortable="true"
                                   CellClass="@((item)=>"name-column")">
                <DisplayTemplate>
                    @if (grid.Branches.ContainsKey(context.IdFirstBranch))
                    {
                        @grid.Branches[context.IdFirstBranch].Name;
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Select Class="black name-column" TValue="int" SelectedValue="@((int)(((CellEditContext)context).CellValue))" SelectedValueChanged="@((v) => ((CellEditContext)context).CellValue = v)">
                        <SelectItem Class="active" TValue="int" Value="@(0)"></SelectItem>
                        @foreach (var item in grid.Branches.Values.OrderBy(b => b.Name))
                        {
                            <SelectItem TValue="int" Value="@(item.Id)">@item.Name</SelectItem>
                        }
                    </Select>
                </EditTemplate>
                <FilterTemplate>
                    <Select Class="black name-column" TValue="string" SelectedValueChanged="@(e => context.TriggerFilterChange(e == "*" ? "" : e.ToString()))">
                        <SelectItem  Value="@("*")"></SelectItem>
                        @foreach (var item in mutuals.Select(b => b.IdFirstBranch).Distinct().OrderBy(n => n))
                        {
                            if (grid.Branches.ContainsKey(item))
                            {
                                <SelectItem Value="@item">@grid.Branches[item].Name</SelectItem>
                            }
                        }
                    </Select>
                </FilterTemplate>
            </DataGridNumericColumn>
            @*IdSecondBranch*@
            <DataGridNumericColumn TItem="Mutual"
                                   Field="@nameof(Mutual.IdSecondBranch)"
                                   Caption="@Localizer.secondBranch"
                                   Editable="true"
                                   Sortable="true"
                                   CellClass="@((item)=>"name-column")">
                <DisplayTemplate>
                    @if (grid.Branches.ContainsKey(context.IdSecondBranch))
                    {
                        @grid.Branches[context.IdSecondBranch].Name;
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Select Class="black name-column" TValue="int" SelectedValue="@((int)(((CellEditContext)context).CellValue))" SelectedValueChanged="@((v) => ((CellEditContext)context).CellValue = v)">
                        <SelectItem Class="active" TValue="int" Value="@(0)"></SelectItem>
                        @foreach (var item in grid.Branches.Values.OrderBy(b => b.Name))
                        {
                            <SelectItem TValue="int" Value="@(item.Id)">@item.Name</SelectItem>
                        }
                    </Select>
                </EditTemplate>
                <FilterTemplate>
                    <Select Class="black name-column" TValue="string" SelectedValueChanged="@(e => context.TriggerFilterChange(e == "*" ? "" : e.ToString()))">
                        <SelectItem Value="@("*")"></SelectItem>
                        @foreach (var item in mutuals.Select(b => b.IdSecondBranch).Distinct().OrderBy(n => n))
                        {
                            if (grid.Branches.ContainsKey(item))
                            {
                                <SelectItem Value="@item">@grid.Branches[item].Name</SelectItem>
                            }
                        }
                    </Select>
                </FilterTemplate>
            </DataGridNumericColumn>
            @*R*@
            <DataGridNumericColumn TItem="Mutual"
                                   Field="@nameof(Mutual.R)"
                                   Caption="@(new String("R, ["+@Localizer.ohm+"]"))"
                                   Editable="true"
                                   Sortable="true"
                                   CellClass="@((item)=>"numeric-column")"></DataGridNumericColumn>
            @*X*@
        <DataGridNumericColumn TItem="Mutual"
                               Field="@nameof(Mutual.X)"
                               Caption="@(new String("X, ["+@Localizer.ohm+"]"))"
                               Editable="true"
                               Sortable="true"
                               CellClass="@((item)=>"numeric-column")"></DataGridNumericColumn>

            @*Commands*@
            <DataGridCommandColumn TItem="Mutual" 
                                   CellClass="@((item)=>"edit-column")">
                <NewCommandTemplate>
                    <Button_Add OnClickCallback = "@context.Clicked" />
                </NewCommandTemplate>
                <EditCommandTemplate>
                    <Button_Edit OnClickCallback = "@context.Clicked"/>
                    <Button_Duplicate OnClickCallback = "@(() => DuplicateItem(context.Item))" />
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Button_Delete OnClickCallback = "@context.Clicked"/>
                </DeleteCommandTemplate>
                <SaveCommandTemplate>
                    <Button_Save OnClickCallback = "@context.Clicked"/>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button_Cancel OnClickCallback = "@context.Clicked"/>
                </CancelCommandTemplate>
                <ClearFilterCommandTemplate>
                    <Button_Filter OnClickCallback = "@context.Clicked"/>
                </ClearFilterCommandTemplate>
            </DataGridCommandColumn>
        </DataGrid>
    </div>

}

@code {
    [Inject] Grid grid { get; set; }

    private List<Mutual> mutuals { get; set; }

    void OnRowInserted(SavedRowItem<Mutual, Dictionary<string, object>> e)
    {
        grid.Mutuals.Add(e.Item.Id, e.Item);
    }

    //TODO: Implement(?)
    void OnRowUpdated(SavedRowItem<Mutual, Dictionary<string, object>> e)
    {
    }

    void OnRowRemoved(Mutual e)
    {
        if (grid.Mutuals.Values.Contains(e))
        {
            grid.Mutuals.Remove(e.Id);
        }
    }

    //TODO: Сделать механизм возникновения ошибки при одинаковых номерах (наименованиях)
    void DuplicateItem(Mutual e)
    {
        var new_mut = new Mutual()
        {
            Name = e.Name,
            IdFirstBranch = e.IdFirstBranch,
            IdSecondBranch = e.IdSecondBranch,
            X = e.X,
            R = e.R,
            IsActive = e.IsActive
        };

        mutuals.Add(new_mut);
        grid.Mutuals.Add(new_mut.Id, new_mut);

        StateHasChanged();
    }

    //Localizator
    I18nText.Pages.Branches Localizer = new I18nText.Pages.Branches();

    protected override async Task OnInitializedAsync()
    {
        grid = await Grid.GetInstance();
        Localizer = await I18nText.GetTextTableAsync<I18nText.Pages.Branches>(this);
        mutuals = await Task.Run(() => grid.Mutuals.Values.ToList<Mutual>());
    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await ValidateOnRender();
    }
}