@inject IJSRuntime JS
@inject LogBase Log
@inject HttpClient Http
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject NavigationManager navmanager
@using Blazorise

<header class="header d-flex align-items-center sticky-top">
    <NavLink class="navbar-brand active mx-5"
             href="/"
             Match="NavLinkMatch.All"
             ActiveClass="active"
             style="font-family: Amithen;
                    color: var(--S-middle);
                    font-size: 2.5rem;
                    width: 120px;">
        Lime
    </NavLink>

    <Select TValue="string"
            SelectedValue="selector"
            SelectedValueChanged="@OnSelectedValueChanged"
            Class="choose-grid transparent"
            id="ChooseGrid">
        @if (Grid.Networks != null & Grid.Networks.Count > 1)
        {
            @foreach (var item in Grid.Networks.Where(g => g.Name != "Test Grid"))
            {
                <SelectItem Value="item.Name">@item.Name</SelectItem>
            }
        }
        else
        {
            <SelectItem Value="@("")">(new grid)</SelectItem>
        }
        <hr />
        <SelectItem Value="@("Test_internal")">Тестовая</SelectItem>
        <SelectItem Value="@("Add")">Add grid</SelectItem>
    </Select>

    @*<form>
            <select class="form-control choose-grid transparent" id="ChooseGrid">
                <option>My Grid 1</option>
                <option>My Grid 2</option>
                <option>Test IEEE12</option>
                <hr />
                <option>Add new grid</option>
            </select>
        </form>*@

    <div class="btn-group ml-5">
        <Tooltip Text="@Localizer.Upload" Placement="Placement.Bottom">
            <button type="button" class="icon">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#upload"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="@Localizer.Download" Placement="Placement.Bottom">
            <button type="button" class="icon" @onclick="DownloadFile">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#download"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="@Localizer.Calculate_All" Placement="Placement.Bottom">
            <button type="button"
                    class="icon"
                    @onclick="Add">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#CalcAll"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="@Localizer.Log" Placement="Placement.Bottom">
            <button type="button"
                    class="icon"
                    id="bell"
                    @onclick="LogOpenEvent">
                <svg class="header-icon">
                    <use href="@Log.ImageChecker()"></use>
                </svg>
            </button>
        </Tooltip>
    </div>
    <div class="btn-group ml-auto">
        <Tooltip Text="@Localizer.Test_IEEE14" Placement="Placement.Left">
            <button type="button"
                    class="icon"
                    @onclick="LoadIEEE14">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#IEEE_14"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="@Localizer.Language" Placement="Placement.Left">
            <button type="button"
                    class="icon"
                    @onclick="ChangeLanguage">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="@(IsRus ? SourceRus : SourceUS )"></use>
                </svg>
            </button>
        </Tooltip>
    </div>
</header>

@code {
    [Inject] Grid grid { get; set; }

    [Parameter]
    public EventCallback LogOpenEvent { get; set; }

    void Add()
    {
        Log.AddMessage(new Message(MessageClass.System, MessageType.Danger, "Внимание!", "У нас кончилась водка!", "contacts"));
    }

    //Localizator
    I18nText.Shared.Header Localizer = new I18nText.Shared.Header();

    protected override async Task OnInitializedAsync()
    {
        Localizer = await I18nText.GetTextTableAsync<I18nText.Shared.Header>(this);
        grid = await Grid.GetInstance();
    }

    protected override void OnInitialized()
    {
        Log.OnChange += StateHasChanged;
    }

    public const string SourceRus = "/img/Icon.svg#russia";
    public const string SourceUS = "/img/Icon.svg#USA";

    public bool IsRus { get; set; } = true;

    public async Task ChangeLanguage()
    {
        IsRus = !IsRus;
        if (IsRus) await I18nText.SetCurrentLanguageAsync("ru");
        else await I18nText.SetCurrentLanguageAsync("en");
    }

    //селектор
    string selector;

    void OnSelectedValueChanged(string value)
    {
        if (value == "Test_internal")
        {
            Grid.SetInstance(Grid.Networks[0]);
            navmanager.NavigateTo("/");
            return;
        }

        Grid.SetInstance(null);
        navmanager.NavigateTo("/");

        StateHasChanged();
    }



    //Serialization

    public const string SourceIEEE14 = "/Test Grid/IEEE 14/IEEE 14-bus modified test system.json";

    public async void LoadIEEE14()
    {
        //TODO: Сделать загрузку файла с тестовой схемой. По какой-то причине не могу получить доступ к файлу
        //grid = await Grid.Deserialize(SourceIEEE14);

        grid = await Http.GetFromJsonAsync<Grid>("TestGrid"); //на основе контроллера (пока что ошибка десериализации)
        Log.AddMessage(MessageCollection.Serialize_Success("Загружена схема IEEE 14"));

        StateHasChanged();
    }

    public async void DownloadFile()
    {
        StateHasChanged();

        //Отчистка лога
        if (Log.Messages.Any((m) => m.Class == MessageClass.Serialization)) await Log.RemoveMessage(byClass: MessageClass.Serialization);

        var now = DateTime.Now.ToLocalTime().ToString();
        string name = grid.Name + "_" + now + ".json";

        string content = await grid.Serialize();

        await JS.InvokeAsync<object>("FileSaveAs", name, content);

        Log.AddMessage(MessageCollection.Serialize_Success(name));
        Log.Collapse = false;
    }
}