@inject LogBase LB
@inject IJSRuntime JS
@inject LogBase Log
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<div class="header d-flex">
    <NavLink class="navbar-brand active mx-5 mr-auto"
             href="/"
             Match="NavLinkMatch.All"
             ActiveClass="active"
             style="font-family: Amithen;
                    color: var(--S-middle);
                    font-size: 2.5rem;">
        Lime
    </NavLink>
    <div class="btn-group " style="margin-right:3.5rem">
        <button type="button" class="icon" title="Загрузить">
            <svg @onclick="@(() => {})" class="menu-icon">
                <use href="/img/Icon.svg#upload"></use>
            </svg>
        </button>
        <button type="button" class="icon" title="Сохранить" @onclick="DownloadFile">
            <svg @onclick="@(() => {})" class="menu-icon">
                <use href="/img/Icon.svg#download"></use>
            </svg>
        </button>
        <button type="button"
                class="icon"
                title="Рассчитать все"
                @onclick="Add">
            <svg @onclick="@(() => {})" class="menu-icon">
                <use href="/img/Icon.svg#CalcAll"></use>
            </svg>
        </button>
        <button type="button"
                class="icon"
                title="Уведомления"
                id="bell"
                @onclick="LogOpenEvent">
            <svg class="menu-icon">
                <use href="@LB.ImageChecker()"></use>
            </svg>
        </button>
    </div>
    <div>
        <button type="button"
                class="icon"
                title="Тест IEEE14">
            <svg @onclick="@(() => {})" class="menu-icon">
                <use href="/img/Icon.svg#IEEE_14"></use>
            </svg>
        </button>
        <button type="button"
                class="icon"
                title="lang"
                @onclick="ChangeLanguage">
            <svg @onclick="@(() => {})" class="menu-icon">
                <use href="@(IsRus ? SourceRus : SourceUS )"></use>
            </svg>
            @*<img src="@(IsRus ? SourceRus : SourceUS )" width="25px" height="25px" alt="russia">*@
        </button>
    </div>
</div>

@code {
    [Inject] Grid grid { get; set; } = Grid.GetInstance();

    [Parameter]
    public EventCallback LogOpenEvent { get; set; }

    void Add()
    {
        LB.AddMessage(new Message(MessageClass.System, MessageType.Danger, "Внимание!", "У нас кончилась водка!", "contacts"));
    }

    protected override void OnInitialized()
    {
        LB.OnChange += StateHasChanged;
    }

    public const string SourceRus = "/img/Icon.svg#russia";
    public const string SourceUS = "/img/Icon.svg#USA";

    public bool IsRus { get; set; } = true;

    public async Task ChangeLanguage()
    {
        IsRus = !IsRus;
        if (IsRus) await I18nText.SetCurrentLanguageAsync("ru");
        else await I18nText.SetCurrentLanguageAsync("en");
    }

    public async void DownloadFile()
    {
        StateHasChanged();

        if(grid.Branches.Count == 0)
        {
            Log.AddMessage(MessageCollection.Serialize_BranchError());
            Log.Collapse = false;
            return;
        }
        if(grid.Buses.Count == 0)
        {
            Log.AddMessage(MessageCollection.Serialize_NodeError());
            Log.Collapse = false;
            return;
        }

        var now = DateTime.Now.ToLocalTime().ToString();
        var name = "Network_" + now + ".json";

        string content = await grid.Serialize();

        await JS.InvokeAsync<object>("FileSaveAs", name, content);

        Log.AddMessage(MessageCollection.Serialize_Success(name));
        Log.Collapse = false;
    }
}