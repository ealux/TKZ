@inject LogBase LB
@inject IJSRuntime JS
@inject LogBase Log
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<header class="header d-flex align-items-center">
    <NavLink class="navbar-brand active mx-5"
             href="/"
             Match="NavLinkMatch.All"
             ActiveClass="active"
             style="font-family: Amithen;
                    color: var(--S-middle);
                    font-size: 2.5rem;
                    width: 120px;">
        Lime
    </NavLink>
    <form>
        <select class="form-control choose-grid transparent" id="ChooseGrid">
            <option>My Grid 1</option>
            <option>My Grid 2</option>
            <option>Test IEEE12</option>
            <option>Add new grid</option>
        </select>
    </form>
    <div class="btn-group ml-5">
        <Tooltip Text="Upload" Placement="Placement.Bottom">
            <button type="button" class="icon">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#upload"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="Download" Placement="Placement.Bottom">
            <button type="button" class="icon" @onclick="DownloadFile">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#download"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="Calculate All" Placement="Placement.Bottom">
            <button type="button"
                    class="icon"
                    @onclick="Add">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#CalcAll"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="Log" Placement="Placement.Bottom">
            <button type="button"
                    class="icon"
                    id="bell"
                    @onclick="LogOpenEvent">
                <svg class="header-icon">
                    <use href="@LB.ImageChecker()"></use>
                </svg>
            </button>
        </Tooltip>
    </div>
    <div class="btn-group ml-auto">
        <Tooltip Text="Test IEEE 14" Placement="Placement.Bottom">
            <button type="button"
                    class="icon"
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="/img/Icon.svg#IEEE_14"></use>
                </svg>
            </button>
        </Tooltip>
        <Tooltip Text="Language" Placement="Placement.Bottom">
            <button type="button"
                    class="icon"
                    @onclick="ChangeLanguage">
                <svg @onclick="@(() => {})" class="header-icon">
                    <use href="@(IsRus ? SourceRus : SourceUS )"></use>
                </svg>
            </button>
        </Tooltip>
    </div>
</header>

@code {
    [Inject] Grid grid { get; set; } = Grid.GetInstance();

    [Parameter]
    public EventCallback LogOpenEvent { get; set; }

    void Add()
    {
        LB.AddMessage(new Message(MessageClass.System, MessageType.Danger, "Внимание!", "У нас кончилась водка!", "contacts"));
    }

    protected override void OnInitialized()
    {
        LB.OnChange += StateHasChanged;
    }

    public const string SourceRus = "/img/Icon.svg#russia";
    public const string SourceUS = "/img/Icon.svg#USA";

    public bool IsRus { get; set; } = true;

    public async Task ChangeLanguage()
    {
        IsRus = !IsRus;
        if (IsRus) await I18nText.SetCurrentLanguageAsync("ru");
        else await I18nText.SetCurrentLanguageAsync("en");
    }

    public async void DownloadFile()
    {
        StateHasChanged();

        //Отчистка лога
        if (Log.Messages.Any((m) => m.Class == MessageClass.Serialization)) await Log.RemoveMessage(byClass: MessageClass.Serialization);

        if (grid.Branches.Count == 0)
        {
            Log.AddMessage(MessageCollection.Serialize_BranchError());
            Log.Collapse = false;
            return;
        }
        if (grid.Buses.Count == 0)
        {
            Log.AddMessage(MessageCollection.Serialize_NodeError());
            Log.Collapse = false;
            return;
        }

        var now = DateTime.Now.ToLocalTime().ToString();
        var name = "Network_" + now + ".json";

        string content = await grid.Serialize();

        await JS.InvokeAsync<object>("FileSaveAs", name, content);

        Log.AddMessage(MessageCollection.Serialize_Success(name));
        Log.Collapse = false;
    }
}