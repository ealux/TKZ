@inject IJSRuntime JS
@inject LogBase Log
@inject HttpClient Http
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject NavigationManager navmanager
@using Blazorise
@using TKZ.Client.Pages.Components
    <Bar Breakpoint="Breakpoint.Widescreen" Class="header d-flex align-items-center sticky-top">
        <BarBrand>
            <NavLink class="navbar-brand active mx-5"
                     href="/"
                     Match="NavLinkMatch.All"
                     ActiveClass="active"
                     style="font-family: Amithen;
                    color: var(--S-middle);
                    font-size: 2.5rem;
                    width: 120px;">
                Lime
            </NavLink>
        </BarBrand>
        @if (Grid.Networks.Count > 1)
        {
            <Tooltip Text="@Localizer.AddNewGrid" Placement="Placement.Bottom">
                <Button Active="true"
                        Class="round icon"
                        Clicked="@(() => { navmanager.NavigateTo("/gridmanager"); })">
                    <svg class="header-icon" @onclick="@(() => {})">
                        <use href="/img/Icon.svg#Add"></use>
                    </svg>
                </Button>
            </Tooltip>

            <Select TValue="string"
                    SelectedValue="service.CurrentGridName"
                    SelectedValueChanged="@OnSelectedValueChanged"
                    Class="choose-grid transparent"
                    @ondblclick="@(()=>{ navmanager.NavigateTo("/gridmanager"); })"
                    id="ChooseGrid">
                @if (Grid.Networks != null & Grid.Networks.Count > 1)
                {
                    @foreach (var item in Grid.Networks.Where(g => g.Name != "Test Grid"))
                    {
                        <SelectItem Value="item.Name">@item.Name</SelectItem>
                    }
                }
                <hr />
                <SelectItem Value="@("Test_internal")">Тестовая</SelectItem>
                <SelectItem Style="color: var(--P-dark);" Value="@("Add_new_grid_internal")">@Localizer.AddNewGrid</SelectItem>
                <SelectItem Value="@("stock")" Visibility="Visibility.Never"></SelectItem>
            </Select>
        }
        else
        {
            <a style="color:white; cursor:pointer;"
               @onclick="@(()=> { navmanager.NavigateTo("/gridmanager");})">
                @Localizer.AddNewGrid
            </a>
        }
        <BarToggler>
        </BarToggler>
        <BarMenu Class="bar-menu">
            <BarStart>
                <BarItem>
                    <Tooltip Text="@Localizer.Upload" Placement="Placement.Bottom">
                        <button type="button" class="icon" @onclick="@(() => {navmanager.NavigateTo("/gridinput");})">
                            <svg @onclick="@(() => { })" class="header-icon">
                                <use href="/img/Icon.svg#upload"></use>
                            </svg>
                        </button>
                        <span class="display-none">@Localizer.Upload</span>
                    </Tooltip>

                </BarItem>
                <BarItem>
                    <Tooltip Text="@Localizer.Download" Placement="Placement.Bottom">
                        <button type="button" class="icon" @onclick="DownloadFile">
                            <svg @onclick="@(() => {})" class="header-icon">
                                <use href="/img/Icon.svg#download"></use>
                            </svg>
                        </button>
                        <span class="display-none">@Localizer.Download</span>
                    </Tooltip>
                </BarItem>
                <BarItem>
                    <Tooltip Text="@Localizer.Calculate_All" Placement="Placement.Bottom">
                        <button type="button"
                                class="icon"
                                @onclick="Add">
                            <svg @onclick="@(() => {})" class="header-icon">
                                <use href="/img/Icon.svg#CalcAll"></use>
                            </svg>
                        </button>
                        <span class="display-none">@Localizer.Calculate_All</span>
                    </Tooltip>
                </BarItem>
                <BarItem>
                    <Tooltip Text="@Localizer.Log" Placement="Placement.Bottom">
                        <button type="button"
                                class="icon"
                                id="bell"
                                @onclick="LogOpenEvent">
                            <svg class="header-icon">
                                <use href="@Log.ImageChecker()"></use>
                            </svg>
                        </button>
                        <span class="display-none">@Localizer.Log</span>
                    </Tooltip>
                </BarItem>
            </BarStart>
            <BarEnd>
                <BarItem>
                    <Tooltip Text="@Localizer.Test_IEEE14" Placement="Placement.Left">
                        <button type="button"
                                class="icon"
                                @onclick="LoadIEEE14">
                            <svg @onclick="@(() => {})" class="header-icon">
                                <use href="/img/Icon.svg#IEEE_14"></use>
                            </svg>
                        </button>
                        <span class="display-none">@Localizer.Test_IEEE14</span>
                    </Tooltip>
                </BarItem>
                <BarItem>
                    <Tooltip Text="@Localizer.Language" Placement="Placement.Left">
                        <button type="button"
                                class="icon"
                                @onclick="ChangeLanguage">
                            <svg @onclick="@(() => {})" class="header-icon">
                                <use href="@(IsRus ? SourceRus : SourceUS )"></use>
                            </svg>
                        </button>
                        <span class="display-none">@Localizer.Language</span>
                    </Tooltip>
                </BarItem>
            </BarEnd>
        </BarMenu>
    </Bar>


@code {
    Grid grid { get; set; }
    [Inject] GridService service { get; set; }

    [Parameter]
    public EventCallback LogOpenEvent { get; set; }

    [Parameter]
    public EventCallback ChangeEvent { get; set; }

    void Add()
    {
        Log.AddMessage(new Message(MessageClass.System, MessageType.Danger, "Внимание!", "У нас кончилась водка!", "contacts"));
    }

    //Localizator
    I18nText.Shared.Header Localizer = new I18nText.Shared.Header();

    protected override async Task OnInitializedAsync() //Initial
    {
        Localizer = await I18nText.GetTextTableAsync<I18nText.Shared.Header>(this);
        grid = await Grid.GetInstance();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) //Rerender
    {
        grid = await Grid.GetInstance();
    }

    protected override void OnInitialized() //Initial
    {
        Log.OnChange += StateHasChanged;
    }

    public const string SourceRus = "/img/Icon.svg#russia";
    public const string SourceUS = "/img/Icon.svg#USA";

    public bool IsRus { get; set; } = true;

    public async Task ChangeLanguage()
    {
        IsRus = !IsRus;
        if (IsRus) await I18nText.SetCurrentLanguageAsync("ru");
        else await I18nText.SetCurrentLanguageAsync("en");
    }

    async void OnSelectedValueChanged(string value)
    {
        if (value == "Test_internal")
        {
            await Task.Run(() =>
            {
                service.CurrentGridName = "Test_internal";
                Grid.SetInstance(Grid.Networks[0]);
            });
            navmanager.NavigateTo("/");
            navmanager.NavigateTo("/nodes");
            return;
        }

        if (value == "Add_new_grid_internal")
        {
            navmanager.NavigateTo("/gridmanager");
            service.CurrentGridName = "";
            return;
        }

        await Task.Run(() =>
        {
            service.CurrentGridName = Grid.Networks.Where(g => g.Name == value).First().Name;
            Grid.SetInstance(Grid.Networks.Where(g => g.Name == value).First());
        });

        navmanager.NavigateTo("/");
        navmanager.NavigateTo("/nodes");

        StateHasChanged();
    }

    //Serialization

    public const string SourceIEEE14 = "/Test Grid/IEEE 14/IEEE 14-bus modified test system.json";

    //IEEE14
    public async void LoadIEEE14()
    {
        var testIEEE = await Grid.Deserialize(await Http.GetStringAsync("TestGrid"));

        if (Grid.Networks.Where(g => g.Name.Contains("IEEE 14")).Any()) testIEEE.Name = testIEEE.Name + $" ({Grid.Networks.Where(n => n.Name == testIEEE.Name).Count()})";

        Grid.Networks.Add(testIEEE);
        service.CurrentGridName = Grid.Networks[Grid.Networks.Count - 1].Name;
        Grid.SetInstance(Grid.Networks[Grid.Networks.Count - 1]);

        Log.AddMessage(MessageCollection.Serialize_Success("Загружена схема IEEE 14"));
        Log.Collapse = false;

        navmanager.NavigateTo("/contacts");
        navmanager.NavigateTo("/nodes");

        StateHasChanged();
    }

    public async void DownloadFile()
    {
        StateHasChanged();

        //Отчистка лога
        if (Log.Messages.Any((m) => m.Class == MessageClass.Serialization)) await Log.RemoveMessage(byClass: MessageClass.Serialization);

        var now = DateTime.Now.ToLocalTime().ToString();
        string name = grid.Name + "_" + now + ".json";

        string content = await grid.Serialize();

        await JS.InvokeAsync<object>("FileSaveAs", name, content);

        Log.AddMessage(MessageCollection.Serialize_Success(name));
        Log.Collapse = false;
    }
}